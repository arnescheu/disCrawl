# Also see https://www.pythoncentral.io/introductory-tutorial-python-sqlalchemy/

import argparse

from sqlalchemy import Boolean, Column, DECIMAL, Integer, String, create_engine, ForeignKey
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship

Base = declarative_base()

#classes for main NeissDist code
class DCDistance(Base):
    __tablename__ = 'distance'
    pdb_id = Column(String(10), primary_key=True)
    parent_id = Column(String(10), ForeignKey('summary.pdb_id'))
    #parent = relationship("DCSummary", back_populates="children")
    name = Column(String(250))
    model = Column(String(3), primary_key=True)
    dynamic_chain = Column(String(3), primary_key=True)
    dynamic_chain_poly_id = Column(String(3))
    dynamic_chain_res_count = Column(Integer)
    dynamic_resn = Column(String(3), primary_key=True)
    dynamic_resi = Column(Integer)
    dynamic_pos = Column(Integer, primary_key=True)
    dynamic_order = Column(Boolean)
    dynamic_name = Column(String(2))  # , primary_key=True)
    x_name = Column(String(2))
    nterm = Column(Boolean)
    static_chain = Column(String(3), primary_key=True)
    static_chain_poly_id = Column(String(3))
    static_chain_res_count = Column(Integer)
    static_resn = Column(String(3), primary_key=True)
    static_resi = Column(Integer)
    static_pos = Column(Integer, primary_key=True)
    static_name = Column(String(2))  # , primary_key=True)
    static_order = Column(Boolean)
    inter = Column(Boolean)
    poly_id_eq = Column(Boolean)
    distance = Column(DECIMAL)
    d1_X_C = Column(DECIMAL)
    d2_X_CA = Column(DECIMAL)
    d3_X_N = Column(DECIMAL)
    d4_CA_C = Column(DECIMAL)
    d5_CA_CA = Column(DECIMAL)
    d6_CA_N = Column(DECIMAL)
    d7_N_C = Column(DECIMAL)
    d8_N_CA = Column(DECIMAL)
    d9_N_N = Column(DECIMAL)
    job_id = Column(String(30))
    timestamp = Column(String(30))
    # Table containing positive hits and assembly mode

class DCSummary(Base):
    __tablename__ = 'summary'
    pdb_id = Column(String(10), primary_key=True)
    abort = Column(Boolean)
    pass_filesize = Column(Boolean)
    filesize = Column(DECIMAL)
    pass_structure = Column(Boolean)
    pass_dictionary = Column(Boolean)
    pass_analysis = Column(Boolean)
    model_count = Column(DECIMAL)
    distances = Column(DECIMAL)
    inter_count = Column(DECIMAL)
    dist_count = Column(DECIMAL)
    hit_count = Column(DECIMAL)
    cys_count = Column(DECIMAL)
    name = Column(String(250))
    head = Column(String(250))
    genes = Column(String(250))
    genus = Column(String(200))
    host = Column(String(200))
    method = Column(String(30))
    bio = Column(Integer)
    bio_list = Column(String(30))
    bio_count = Column(DECIMAL)
    ref_ids = Column(String(30)) # obsolete - Delete
    poly_ids = Column(String(30))
    deposition = Column(String(10))
    resolution = Column(String(10))
    distance = Column(DECIMAL)
    d1_X_C = Column(DECIMAL)
    d2_X_CA = Column(DECIMAL)
    d3_X_N = Column(DECIMAL)
    d4_CA_C = Column(DECIMAL)
    d5_CA_CA = Column(DECIMAL)
    d6_CA_N = Column(DECIMAL)
    d7_N_C = Column(DECIMAL)
    d8_N_CA = Column(DECIMAL)
    d9_N_N = Column(DECIMAL)
    model = Column(String(3))
    chain_count = Column(DECIMAL)
    dynamic_chain = Column(String(3))
    dynamic_chain_poly_id = Column(String(3))
    dynamic_chain_res_count = Column(Integer)
    dynamic_resn = Column(String(3))
    dynamic_resi = Column(Integer)
    dynamic_pos = Column(Integer)
    dynamic_name = Column(String(2))
    x_name = Column(String(2))
    nterm = Column(Boolean)
    dynamic_order = Column(Boolean)
    static_chain = Column(String(3))
    static_chain_poly_id = Column(String(3))
    static_chain_res_count = Column(Integer)
    static_resn = Column(String(3))
    static_resi = Column(Integer)
    static_pos = Column(Integer)
    static_name = Column(String(2))
    static_order = Column(Boolean)
    chain_poly_id_eq = Column(Boolean)
    inter = Column(Boolean)
    children = relationship("DCDistance")#, back_populates="parent")
    job_id = Column(String(30))
    timestamp = Column(String(30))
    # random = Column(Integer)


# classes for subsequent analysis of NeissDist
class SubDistance(Base):
    __tablename__ = 'subdistance'
    pdb_id = Column(String(10), primary_key=True)
    parent_id = Column(String(10), ForeignKey('summary.pdb_id'))
    # parent = relationship("DCSummary", back_populates="children")
    name = Column(String(250))
    model = Column(String(3), primary_key=True)
    dynamic_chain = Column(String(3), primary_key=True)
    dynamic_chain_poly_id = Column(String(3))
    dynamic_chain_res_count = Column(Integer)
    dynamic_resn = Column(String(3), primary_key=True)
    dynamic_resi = Column(Integer)
    dynamic_pos = Column(Integer, primary_key=True)
    dynamic_order = Column(Boolean)
    dynamic_name = Column(String(2))  # , primary_key=True)
    x_name = Column(String(2))
    nterm = Column(Boolean)
    static_chain = Column(String(3), primary_key=True)
    static_chain_poly_id = Column(String(3))
    static_chain_res_count = Column(Integer)
    static_resn = Column(String(3), primary_key=True)
    static_resi = Column(Integer)
    static_pos = Column(Integer, primary_key=True)
    static_name = Column(String(2))  # , primary_key=True)
    static_order = Column(Boolean)
    inter = Column(Boolean)
    poly_id_eq = Column(Boolean)
    distance = Column(DECIMAL)
    d1_X_C = Column(DECIMAL)
    d2_X_CA = Column(DECIMAL)
    d3_X_N = Column(DECIMAL)
    d4_CA_C = Column(DECIMAL)
    d5_CA_CA = Column(DECIMAL)
    d6_CA_N = Column(DECIMAL)
    d7_N_C = Column(DECIMAL)
    d8_N_CA = Column(DECIMAL)
    d9_N_N = Column(DECIMAL)
    job_id = Column(String(30))
    timestamp = Column(String(30))
    gp_row_id = Column(String(10))
    min_distance = Column(DECIMAL)
    min_type = Column(String(4))
    p_row_id = Column(String(10))
    # Table containing positive hits and assembly mode


class Sub2Distance(Base):
    __tablename__ = 'sub2distance'
    pdb_id = Column(String(10), primary_key=True)
    parent_id = Column(String(10), ForeignKey('summary.pdb_id'))
    # parent = relationship("DCSummary", back_populates="children")
    name = Column(String(250))
    model = Column(String(3), primary_key=True)
    dynamic_chain = Column(String(3), primary_key=True)
    dynamic_chain_poly_id = Column(String(3))
    dynamic_chain_res_count = Column(Integer)
    dynamic_resn = Column(String(3), primary_key=True)
    dynamic_resi = Column(Integer)
    dynamic_pos = Column(Integer, primary_key=True)
    dynamic_order = Column(Boolean)
    dynamic_name = Column(String(2))  # , primary_key=True)
    x_name = Column(String(2))
    nterm = Column(Boolean)
    static_chain = Column(String(3), primary_key=True)
    static_chain_poly_id = Column(String(3))
    static_chain_res_count = Column(Integer)
    static_resn = Column(String(3), primary_key=True)
    static_resi = Column(Integer)
    static_pos = Column(Integer, primary_key=True)
    static_name = Column(String(2))  # , primary_key=True)
    static_order = Column(Boolean)
    inter = Column(Boolean)
    poly_id_eq = Column(Boolean)
    distance = Column(DECIMAL)
    d1_X_C = Column(DECIMAL)
    d2_X_CA = Column(DECIMAL)
    d3_X_N = Column(DECIMAL)
    d4_CA_C = Column(DECIMAL)
    d5_CA_CA = Column(DECIMAL)
    d6_CA_N = Column(DECIMAL)
    d7_N_C = Column(DECIMAL)
    d8_N_CA = Column(DECIMAL)
    d9_N_N = Column(DECIMAL)
    job_id = Column(String(30))
    timestamp = Column(String(30))
    gp_row_id = Column(String(10))
    min_distance = Column(DECIMAL)
    min_type = Column(String(4))
    p_row_id = Column(String(10))
    min2_distance = Column(DECIMAL)
    # Table containing positive hits and assembly mode


class Sub2DistanceUnique(Base):
    __tablename__ = 'sub2distance_unique'
    pdb_id = Column(String(10), primary_key=True)
    parent_id = Column(String(10), ForeignKey('summary.pdb_id'))
    # parent = relationship("DCSummary", back_populates="children")
    name = Column(String(250))
    model = Column(String(3), primary_key=True)
    dynamic_chain = Column(String(3), primary_key=True)
    dynamic_chain_poly_id = Column(String(3))
    dynamic_chain_res_count = Column(Integer)
    dynamic_resn = Column(String(3), primary_key=True)
    dynamic_resi = Column(Integer)
    dynamic_pos = Column(Integer, primary_key=True)
    dynamic_order = Column(Boolean)
    dynamic_name = Column(String(2))  # , primary_key=True)
    x_name = Column(String(2))
    nterm = Column(Boolean)
    static_chain = Column(String(3), primary_key=True)
    static_chain_poly_id = Column(String(3))
    static_chain_res_count = Column(Integer)
    static_resn = Column(String(3), primary_key=True)
    static_resi = Column(Integer)
    static_pos = Column(Integer, primary_key=True)
    static_name = Column(String(2))  # , primary_key=True)
    static_order = Column(Boolean)
    inter = Column(Boolean)
    poly_id_eq = Column(Boolean)
    distance = Column(DECIMAL)
    d1_X_C = Column(DECIMAL)
    d2_X_CA = Column(DECIMAL)
    d3_X_N = Column(DECIMAL)
    d4_CA_C = Column(DECIMAL)
    d5_CA_CA = Column(DECIMAL)
    d6_CA_N = Column(DECIMAL)
    d7_N_C = Column(DECIMAL)
    d8_N_CA = Column(DECIMAL)
    d9_N_N = Column(DECIMAL)
    job_id = Column(String(30))
    timestamp = Column(String(30))
    gp_row_id = Column(String(10))
    min_distance = Column(DECIMAL)
    min_type = Column(String(4))
    p_row_id = Column(String(10))
    min2_distance = Column(DECIMAL)
    min3_distance = Column(DECIMAL)
    source_pdb_id = Column(String(10))
    # Table containing positive hits and assembly mode


class CompDistance(Base):
    __tablename__ = 'comp_distance'
    pdb_id = Column(String(10), primary_key=True)
    parent_id = Column(String(10), ForeignKey('summary.pdb_id'))
    # parent = relationship("DCSummary", back_populates="children")
    name = Column(String(250))
    model = Column(String(3), primary_key=True)
    dynamic_chain = Column(String(3), primary_key=True)
    dynamic_chain_poly_id = Column(String(3))
    dynamic_chain_res_count = Column(Integer)
    dynamic_resn = Column(String(3), primary_key=True)
    dynamic_resi = Column(Integer)
    dynamic_pos = Column(Integer, primary_key=True)
    dynamic_order = Column(Boolean)
    dynamic_name = Column(String(2))  # , primary_key=True)
    x_name = Column(String(2))
    nterm = Column(Boolean)
    static_chain = Column(String(3), primary_key=True)
    static_chain_poly_id = Column(String(3))
    static_chain_res_count = Column(Integer)
    static_resn = Column(String(3), primary_key=True)
    static_resi = Column(Integer)
    static_pos = Column(Integer, primary_key=True)
    static_name = Column(String(2))  # , primary_key=True)
    static_order = Column(Boolean)
    inter = Column(Boolean)
    poly_id_eq = Column(Boolean)
    distance = Column(DECIMAL)
    d1_X_C = Column(DECIMAL)
    d2_X_CA = Column(DECIMAL)
    d3_X_N = Column(DECIMAL)
    d4_CA_C = Column(DECIMAL)
    d5_CA_CA = Column(DECIMAL)
    d6_CA_N = Column(DECIMAL)
    d7_N_C = Column(DECIMAL)
    d8_N_CA = Column(DECIMAL)
    d9_N_N = Column(DECIMAL)
    job_id = Column(String(30))
    timestamp = Column(String(30))
    gp_row_id = Column(String(10))
    min_distance = Column(DECIMAL)
    min_type = Column(String(4))
    p_row_id = Column(String(10))
    min2_distance = Column(String(4))
    min3_distance = Column(DECIMAL)
    cnt_star = Column(String(4))
    cnt_pideq = Column(String(4))


class CompDistanceUnique(Base):
    __tablename__ = 'comp_distance_unique'
    pdb_id = Column(String(10), primary_key=True)
    parent_id = Column(String(10), ForeignKey('summary.pdb_id'))
    # parent = relationship("DCSummary", back_populates="children")
    name = Column(String(250))
    model = Column(String(3), primary_key=True)
    dynamic_chain = Column(String(3), primary_key=True)
    dynamic_chain_poly_id = Column(String(3))
    dynamic_chain_res_count = Column(Integer)
    dynamic_resn = Column(String(3), primary_key=True)
    dynamic_resi = Column(Integer)
    dynamic_pos = Column(Integer, primary_key=True)
    dynamic_order = Column(Boolean)
    dynamic_name = Column(String(2))  # , primary_key=True)
    x_name = Column(String(2))
    nterm = Column(Boolean)
    static_chain = Column(String(3), primary_key=True)
    static_chain_poly_id = Column(String(3))
    static_chain_res_count = Column(Integer)
    static_resn = Column(String(3), primary_key=True)
    static_resi = Column(Integer)
    static_pos = Column(Integer, primary_key=True)
    static_name = Column(String(2))  # , primary_key=True)
    static_order = Column(Boolean)
    inter = Column(Boolean)
    poly_id_eq = Column(Boolean)
    distance = Column(DECIMAL)
    d1_X_C = Column(DECIMAL)
    d2_X_CA = Column(DECIMAL)
    d3_X_N = Column(DECIMAL)
    d4_CA_C = Column(DECIMAL)
    d5_CA_CA = Column(DECIMAL)
    d6_CA_N = Column(DECIMAL)
    d7_N_C = Column(DECIMAL)
    d8_N_CA = Column(DECIMAL)
    d9_N_N = Column(DECIMAL)
    job_id = Column(String(30))
    timestamp = Column(String(30))
    gp_row_id = Column(String(10))
    min_distance = Column(DECIMAL)
    min_type = Column(String(4))
    p_row_id = Column(String(10))
    min2_distance = Column(DECIMAL)
    min3_distance = Column(DECIMAL)
    cnt_star = Column(String(4))
    cnt_pideq = Column(String(4))
    min4_distance = Column(DECIMAL)
    source_pdb_id = Column(String(10))

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("-db", "--database")
    args = parser.parse_args()
    engine = create_engine(args.database)

    # Create all tables in the engine. This is equivalent to "Create Table"
    # statements in raw SQL.
    Base.metadata.create_all(engine)
